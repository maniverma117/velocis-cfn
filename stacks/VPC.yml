AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template deploys a Isolate VPC as per the Velocis standard, with a pair
  of public and private subnets spread across two Availability Zones. It deploys
  an internet gateway, with a default route on the public subnets. It deploys a
  pair of NAT gateways (one in each AZ), and default routes for them in the
  private subnets.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Global Configuration
        Parameters:
          - ClientName
      - Label:
          default: Network Configuration
        Parameters:
          - NumberOfAZs
          - PrivateSubnets
          - natif
      - Label:
          default: Public VPC Configuration
        Parameters:
          - vpcCidr
          - PublicSubnet1aCidr
          - PublicSubnet1bCidr
          - PublicSubnet1cCidr
      - Label:
          default: Private VPC Configuration
        Parameters:
          - PrivateSubnet1aCidr
          - PrivateSubnet1bCidr
          - PrivateSubnet1cCidr
    ParameterLabels:
      NumberOfAZs:
        default: Availability Zone
      PrivateSubnets:
        default: Private Subnet
      natif:
        default: NAT Gateway
      vpcCidr:
        default: VPC
      PublicSubnet1aCidr:
        default: Public CIDR 1A
      PublicSubnet1bCidr:
        default: Public CIDR 1B
      PublicSubnet1cCidr:
        default: Public CIDR 1C
      PrivateSubnet1aCidr:
        default: Private CIDR 1A
      PrivateSubnet1bCidr:
        default: Private CIDR 1B
      PrivateSubnet1cCidr:
        default: Private CIDR 1C
      ClientName:
        default: Client Name
Parameters:
  ClientName:
    Description: Enter Client name.
    Type: String
    Default: Velocis
  natif:
    Description: Do you need NAT.
    Default: 'No'
    Type: String
    AllowedValues:
      - 'No'
      - 'Yes'
    ConstraintDescription: Choose the Yes and No option.
  PrivateSubnets:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
    Description: Do you want to create private subnets in addition to public subnets?
  NumberOfAZs:
    Type: Number
    AllowedValues:
      - 1
      - 2
      - 3
    Default: 2
    Description: How many Availability Zones do you wish to utilize?
  vpcCidr:
    Description: Enter your Custom VPC CIDR block.
    Type: String
    Default: 10.1.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1aCidr:
    Description: Enter your Custom Public Subnet 1a CIDR block.
    Type: String
    Default: 10.1.10.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet1aCidr:
    Description: Enter your Custom Private Subnet 1a CIDR block.
    Type: String
    Default: 10.1.50.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1bCidr:
    Description: Enter your Custom Public Subnet 1b CIDR block.
    Type: String
    Default: 10.1.20.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet1bCidr:
    Description: Enter your Custom Private Subnet 1b CIDR block.
    Type: String
    Default: 10.1.60.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1cCidr:
    Description: Enter your Custom Public Subnet 1b CIDR block.
    Type: String
    Default: 10.1.30.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet1cCidr:
    Description: Enter your Custom Private Subnet 1b CIDR block.
    Type: String
    Default: 10.1.70.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
Conditions:
  BuildPublicB:
    'Fn::Not':
      - 'Fn::Equals':
          - Ref: NumberOfAZs
          - 1
  BuildPublicC:
    'Fn::Equals':
      - Ref: NumberOfAZs
      - 3
  BuildPrivateSubnets:
    'Fn::Equals':
      - Ref: PrivateSubnets
      - true
  BuildPrivateA:
    'Fn::And':
      - 'Fn::Equals':
          - Ref: PrivateSubnets
          - true
      - 'Fn::Equals':
          - Ref: natif
          - 'No'
  BuildPrivateANAT:
    'Fn::And':
      - 'Fn::Equals':
          - Ref: PrivateSubnets
          - true
      - 'Fn::Equals':
          - Ref: natif
          - 'Yes'
  BuildPrivateB:
    'Fn::And':
      - Condition: BuildPrivateSubnets
      - Condition: BuildPublicB
      - Condition: BuildPrivateA
  BuildPrivateC:
    'Fn::And':
      - Condition: BuildPrivateSubnets
      - Condition: BuildPublicC
      - Condition: BuildPrivateA
  BuildPrivateBNAT:
    'Fn::And':
      - Condition: BuildPrivateSubnets
      - Condition: BuildPublicB
      - Condition: BuildPrivateANAT
  BuildPrivateCNAT:
    'Fn::And':
      - Condition: BuildPrivateSubnets
      - Condition: BuildPublicC
      - Condition: BuildPrivateANAT
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Ref: vpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-VPC'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - Ref: ClientName
                - InternetGatway
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1aCidr
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pub-1a'
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPublicB
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1bCidr
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pub-1b'
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPublicC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1cCidr
      AvailabilityZone:
        'Fn::Select':
          - 2
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pub-1c'
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPrivateA
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1aCidr
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pvt-1a'
  PrivateSubnetANAT:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPrivateANAT
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1aCidr
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pvt-1a'
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPrivateB
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1bCidr
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pvt-1b'
  PrivateSubnetBNAT:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPrivateBNAT
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1bCidr
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pvt-1b'
  PrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPrivateC
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1cCidr
      AvailabilityZone:
        'Fn::Select':
          - 2
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pvt-1c'
  PrivateSubnetCNAT:
    Type: 'AWS::EC2::Subnet'
    Condition: BuildPrivateCNAT
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1cCidr
      AvailabilityZone:
        'Fn::Select':
          - 2
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-Pvt-1c'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - Ref: ClientName
                - Pub-RT
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: BuildPrivateA
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - Ref: ClientName
                - Pvt-RT
  PrivateRouteTableNAT:
    Type: 'AWS::EC2::RouteTable'
    Condition: BuildPrivateANAT
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - Ref: ClientName
                - Pvt-RT
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Condition: BuildPrivateANAT
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableNAT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPublicB
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPublicC
    Properties:
      SubnetId:
        Ref: PublicSubnetC
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnetANATRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPrivateANAT
    Properties:
      SubnetId:
        Ref: PrivateSubnetANAT
      RouteTableId:
        Ref: PrivateRouteTableNAT
  PrivateSubnetBNATRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPrivateBNAT
    Properties:
      SubnetId:
        Ref: PrivateSubnetBNAT
      RouteTableId:
        Ref: PrivateRouteTableNAT
  PrivateSubnetCNATRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPrivateCNAT
    Properties:
      SubnetId:
        Ref: PrivateSubnetCNAT
      RouteTableId:
        Ref: PrivateRouteTableNAT
  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPrivateA
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPrivateB
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: BuildPrivateC
    Properties:
      SubnetId:
        Ref: PrivateSubnetC
      RouteTableId:
        Ref: PrivateRouteTable
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Condition: BuildPrivateANAT
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - ElasticIPAddress
          - AllocationId
      SubnetId:
        Ref: PublicSubnetA
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '${ClientName}-NAT'
  ElasticIPAddress:
    Type: 'AWS::EC2::EIP'
    Condition: BuildPrivateANAT
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - Ref: ClientName
                - NAT-EIP
Outputs:
  VPC:
    Description: VPC of the base network
    Value:
      Ref: VPC
    Export:
      Name:
        'Fn::Sub': '${ClientName}-VPC'
  PublicSubnetA:
    Description: First Public Subnet
    Value:
      Ref: PublicSubnetA
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PublicSubnetA'
  PublicSubnetB:
    Description: Second Public Subnet
    Condition: BuildPublicB
    Value:
      Ref: PublicSubnetB
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PublicSubnetB'
  PublicSubnetC:
    Description: Third Public Subnet
    Condition: BuildPublicC
    Value:
      Ref: PublicSubnetC
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PublicSubnetC'
  PrivateSubnetANAT:
    Condition: BuildPrivateANAT
    Description: First Private Subnet
    Value:
      Ref: PrivateSubnetANAT
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PrivateSubnetA'
  PrivateSubnetBNAT:
    Condition: BuildPrivateBNAT
    Description: Second Private Subnet
    Value:
      Ref: PrivateSubnetBNAT
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PrivateSubnetB'
  PrivateSubnetCNAT:
    Condition: BuildPrivateCNAT
    Description: Third Private Subnet
    Value:
      Ref: PrivateSubnetCNAT
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PrivateSubnetC'
  PrivateSubnetA:
    Condition: BuildPrivateA
    Description: First Private Subnet
    Value:
      Ref: PrivateSubnetA
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PrivateSubnetA'
  PrivateSubnetB:
    Condition: BuildPrivateB
    Description: Second Private Subnet
    Value:
      Ref: PrivateSubnetB
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PrivateSubnetB'
  PrivateSubnetC:
    Condition: BuildPrivateC
    Description: Third Private Subnet
    Value:
      Ref: PrivateSubnetC
    Export:
      Name:
        'Fn::Sub': '${ClientName}-PrivateSubnetC'
